<?php

namespace DoctrineProxies\__CG__\Domain\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Product extends \Domain\Entities\Product implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'id', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'title', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'description', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'available', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'price', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'taxes', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'categories', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'brands', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'stock', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'characteristics', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'orders', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'providers', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'purchaseOrderNumber', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'featured'];
        }

        return ['__isInitialized__', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'id', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'title', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'description', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'available', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'price', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'taxes', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'categories', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'brands', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'stock', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'characteristics', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'orders', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'providers', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'purchaseOrderNumber', '' . "\0" . 'Domain\\Entities\\Product' . "\0" . 'featured'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Product $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getPurchaseOrder(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPurchaseOrder', []);

        return parent::getPurchaseOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setPurchaseOrder($purchaseOrder): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPurchaseOrder', [$purchaseOrder]);

        parent::setPurchaseOrder($purchaseOrder);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle(string $title): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription(string $description): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrice(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrice', []);

        return parent::getPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrice(float $price): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrice', [$price]);

        parent::setPrice($price);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxes(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxes', []);

        return parent::getTaxes();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaxes(float $iva): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaxes', [$iva]);

        parent::setTaxes($iva);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategories', []);

        return parent::getCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function isFeatured(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFeatured', []);

        return parent::isFeatured();
    }

    /**
     * {@inheritDoc}
     */
    public function setFeatured(bool $featured): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFeatured', [$featured]);

        parent::setFeatured($featured);
    }

    /**
     * {@inheritDoc}
     */
    public function addCategories(\Domain\Entities\Category $categories): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCategories', [$categories]);

        parent::addCategories($categories);
    }

    /**
     * {@inheritDoc}
     */
    public function getStock(): \Domain\Entities\Stock
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStock', []);

        return parent::getStock();
    }

    /**
     * {@inheritDoc}
     */
    public function setStock(\Domain\Entities\Stock $stock): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStock', [$stock]);

        parent::setStock($stock);
    }

    /**
     * {@inheritDoc}
     */
    public function getCharacteristics()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCharacteristics', []);

        return parent::getCharacteristics();
    }

    /**
     * {@inheritDoc}
     */
    public function addCharacteristics(\Domain\Entities\Characteristic $characteristics): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCharacteristics', [$characteristics]);

        parent::addCharacteristics($characteristics);
    }

    /**
     * {@inheritDoc}
     */
    public function getAvailability(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAvailability', []);

        return parent::getAvailability();
    }

    /**
     * {@inheritDoc}
     */
    public function isAvailable(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAvailable', []);

        return parent::isAvailable();
    }

    /**
     * {@inheritDoc}
     */
    public function setAvailable(bool $available): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAvailable', [$available]);

        parent::setAvailable($available);
    }

    /**
     * {@inheritDoc}
     */
    public function setNotAvailable(bool $notAvailable): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotAvailable', [$notAvailable]);

        parent::setNotAvailable($notAvailable);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrders()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrders', []);

        return parent::getOrders();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrder(\Domain\Entities\Order $newOrder): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrder', [$newOrder]);

        parent::setOrder($newOrder);
    }

    /**
     * {@inheritDoc}
     */
    public function getProviders()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProviders', []);

        return parent::getProviders();
    }

    /**
     * {@inheritDoc}
     */
    public function setProvider(\Domain\Entities\Provider $newProvider): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProvider', [$newProvider]);

        parent::setProvider($newProvider);
    }

    /**
     * {@inheritDoc}
     */
    public function getBrands()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBrands', []);

        return parent::getBrands();
    }

    /**
     * {@inheritDoc}
     */
    public function setBrand(\Domain\Entities\Brand $newBrand): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBrand', [$newBrand]);

        parent::setBrand($newBrand);
    }

}
